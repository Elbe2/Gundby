// ------------------------------------------------------------------
// Lukas Beinlich, 26.07.2014
// light.ps
// Ein einfacher Pixel Shader für Texturen mit diffusem Licht
// ------------------------------------------------------------------

Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 texturecolor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	texturecolor = shaderTexture.Sample(SampleType,input.tex);

	color=ambientColor;
	
	lightDir = -lightDirection;
	lightIntensity = saturate(dot(input.normal,lightDir));
	
	if(lightIntensity > 0.0f)
		color += (diffuseColor*lightIntensity);

	color = saturate(color);
	color = color * texturecolor;

	return color;
}
